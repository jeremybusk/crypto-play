
#OpenResty example /usr/local/openresty/nginx/conf/nginx.conf
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
#
#


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    # init_by_lua_block { require "cjson" } #jeremyb

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        #listen       80;
        #server_name  localhost;
       listen 80 default_server;
        listen [::]:80 default_server;
      listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
    ssl_certificate /etc/letsencrypt/live/stats.rchain.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/stats.rchain.me/privkey.pem; #

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }


#      location = /request_body {
#          client_max_body_size 50k;
#          client_body_buffer_size 50k;
# 
#          content_by_lua_block {
#              ngx.req.read_body()  -- explicitly read the req body
#              local data = ngx.req.get_body_data()
#              if data then
#                  ngx.say("body data:")
#                  ngx.print(data)
#                  return
#              end
# 
#              -- body may get buffered in a temp file:
#              local file = ngx.req.get_body_file()
#              if file then
#                  ngx.say("body is in file ", file)
#              else
#                  ngx.say("no body found")
#              end
#          }
#      }
    location /auth {

 access_by_lua_block{

            local cjson = require("cjson")
                          ngx.req.read_body()
                          local text = ngx.var.request_body
            local body_data = ngx.req.get_body_data()
         ngx.say('========')
         ngx.say(text)
         ngx.say(body_data)
         ngx.say('========')
                         local value = cjson.decode(text)
                         ngx.say(text)
                         ngx.say(type(value))
                         --ngx.say(table.getn(value))
                         -- for k,v in pairs(value) do
                         --     ngx.say(k)
                         --     ngx.say(table.getn(v))
                         --     for _, vv in ipairs(v) do
                         --         ngx.say(_)
                         --         ngx.say(vv)
                         --     end
                         -- end
 ngx.say("hello")




           --ngx.say(ngx.var.newargs)

--                ngx.req.read_body()
--           local oldbody = ngx.req.get_body_data()
--           local body_data = ngx.req.get_body_data()
--           json_string = oldbody
--           table = cjson.decode(json_string)
-- ngx.say("hello")
-- ngx.say(table)
-- local a = ngx.var.args_msg
-- ngx.say(a)
-- ngx.say("hello")

          --      -- local cjson = require "cjson"
          --      -- json_string = oldbody
          --      -- table = cjson.decode(json_string)
          --      -- local newbody = "{"
          --      -- for k,v in pairs(table) do
          --      --     --ngx.log(ngx.NOTICE, k);
          --      --     --ngx.log(ngx.NOTICE, v);
          --      --     newbody = newbody..'"'..k..'":"'..v..'",'
          --      -- end
          --      -- k = "account_id"
          --      -- v = account_id
          --      -- newbody = newbody..'"'..k..'":"'..v..'",'
          --      -- newbody = string.sub(newbody, 0, #newbody-1)
          --      -- newbody = newbody.."}"
          --      -- ngx.log(ngx.NOTICE, newbody);



                        --local cjson = require("cjson")
                        a = ngx.req.read_body()
            --ngx.say(require "cjson".encode{dog = 5, cat = 6})
            --ngx.say(require "cjson".decode())
            --ngx.say(ngx.var.request_body)
            ngx.say(a)
                        --local text = ngx.var.request_body
                        --local value = cjson.new().decode(text)
                        --ngx.say(text)
            ngx.say("dog not found.")
}

         content_by_lua_block {
            s = ngx.decode_base64(b)
            ngx.say(s)
            --ngx.say("dog not found.")
            ngx.say(require "cjson".encode{dog = 5, cat = 6})
            local redis = require "resty.redis"
            local rcon = redis:new()
             --local res = rcon:auth("redismein")
             local redis_db = 0
             rcon:set_timeout(1000)

             local ok, err = rcon:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

            b = ngx.encode_base64("somestring")
            s = ngx.decode_base64(b)
        }
    }

     location /lua_content {
#local redis = require "resty.redis"
             # local rcon = redis:new()
#             --local res = rcon:auth("redismein")
#             local redis_db = 0
#             rcon:set_timeout(1000)
         # MIME type determined by default_type:
         default_type 'text/plain';

         content_by_lua_block {
local redis = require "resty.redis"
            local rcon = redis:new()
             --local res = rcon:auth("redismein")
             local redis_db = 0
             rcon:set_timeout(1000)

             local ok, err = rcon:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

            b = ngx.encode_base64("somestring")
            s = ngx.decode_base64(b)
            -- s = ngx.decode_base64("slchpKPxmr9nsDWZ4RjtF+VIoOKkPAeAHI+DgyPXFGY=")
            ngx.say(s)
           ok, err = rcon:set("base", "an animal")
           ok, err = rcon:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = rcon:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end



--local ipaddr, err = rcon:hget("token:" .. token, "acl_account_id")
local token = "1"
--local ipaddr, err = rcon:hget("pk:" .. token, "ipaddr")
--local ipaddr, err = rcon:hget("pk:1", "ipaddr")
local ipaddr, err = rcon:hget("base64-public-key", "ipaddr")
local field1, err = rcon:hget("htest", "field1")
local ipaddr, err = rcon:hget("a:1", "ipaddr")
local ipaddr, err = rcon:hget("pk:1", "ipaddr")
             ngx.say(ipaddr)
             ngx.say(field1)
            if ipaddr == ngx.null then
                ngx.exit(ngx.HTTP_FORBIDDEN)
                --ngx.say("missing valid ipaddr")
            end



ngx.log(ngx.NOTICE, "Hello") 
ngx.log(ngx.NOTICE, err) 
ngx.log(ngx.NOTICE, ipaddr) 
ngx.log(ngx.NOTICE, "fffff") 
             --ngx.say('Hello,world!')
             ngx.say(err)
         }
     }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
